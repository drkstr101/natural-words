/**
 * Note on Comments
 * ----------------
 * The comments shown above each element are always updated first,
 * and represent the true spec as it's intended. Any mismatch between 
 * the code and these comments is a bug in the code, and not of the 
 * spec. This does not imply however that the spec correctly matches the 
 * true intention, which is a bug in the spec and not the code.
 * 
 */
grammar org.agileware.natural.words.Words hidden(WS)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate words "http://www.agileware.org/natural/words/Words"


// Structural Elements
////

/**
 * Contains a single Document which may possibly be null when no readable content can be parsed
 */
WordsModel:
	document=Document?
;

/**
 * Contains Section+
 */
Document:
	sections+=Section+
;

/**
 *  A block of semantic text content, such as a Paragraph, Table*, or NamedSection*, etc.
 */
Section: Paragraph;

/**
 * A Paragraph is any block of text that begins with StartLiteral, and a single TextLiteral,
 * which may contain empty text, and is terminated by two NL chars at the end of the
 * text block.
 */
Paragraph: {Paragraph}
	start=StartLiteral
	rest=TextLiteral
	NL
;

// Text Literals
////

/**
 * Any valid terminal that specifies the start of a paragraph
 */
StartLiteral: {StartLiteral}
	SIMPLE_WORD
;

/**
 * TextLiteral is any valid block of semantic text that may is
 * contained between a StartLiteral and an EndLiteral. Each TextLiteral
 * will have an EString value containing the true string value without
 * semantic terminals or additional whitespace
 */
TextLiteral: Text;

/**
 * Contains a single TextValue as an EString
 */
Text: {Text}
	value=TextValue
;

/**
 * generic type of EString representing the true semantic 
 * value of a block of text content 
 */
TextValue: EmptyTextValue
	| BlockTextValue
;

/**
 * Contains 0 or more WS chars
 * @returns an empty string
 */
EmptyTextValue returns ecore::EString:
	WS*
;

/**
 * Multi-line group of word literals
 * @returns A string without any whitespace at the start or end of the string
 */
BlockTextValue returns ecore::EString:
	(SIMPLE_WORD+ NL)+
;


// Common Terminals
////

//terminal NUM returns ecore::EDouble:
//	'-'? (DIGIT)+ ('.' (DIGIT)+)?
//;
	
//terminal STR returns ecore::EString:
//		'"' ( '\\' . | !('\\'|'"') )* '"' |
//		"'" ( '\\' . | !('\\'|"'") )* "'"
//;

terminal SIMPLE_WORD: 
	(DIGIT | LETTER) 
	(DIGIT | LETTER | '-' | '_' | '.')*
;

terminal NL: ('\r'? '\n') WS*;
terminal WS: (SPACE | '\t');


// Unicode Ranges
// TODO: add more charachter ranges than basic Latin
////

terminal fragment SPACE: ASCII_SPACE;

terminal fragment PUNCTUATION: ASCII_PUNCTUATION;

terminal fragment DIGIT: ASCII_DIGIT;

terminal fragment LETTER: LATIN_ALPHABET;


// Basic Latin
// Source: https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)
////

terminal fragment BASIC_LATIN: LATIN_ALPHABET
	| ASCII_SPACE
	| ASCII_DIGIT
	| ASCII_PUNCTUATION
;

terminal fragment ASCII_SPACE: '\u0020';

terminal fragment ASCII_DIGIT: ('\u0030'..'\u0039');

// all ascii chars other than letters, digits, or space
terminal fragment ASCII_PUNCTUATION: ('\u0021'..'\u002F')
	| ('\u003A'..'\u0040')
	| ('\u005B'..'\u0060')
	| ('\u007B'..'\u007E')
;

terminal fragment LATIN_ALPHABET: ('\u0041'..'\u005A')
	| ('\u0061'..'\u007A')
;
