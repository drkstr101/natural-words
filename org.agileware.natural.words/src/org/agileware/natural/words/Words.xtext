grammar org.agileware.natural.words.Words hidden(WS)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate words "http://www.agileware.org/natural/words/Words"

// TODO: A word literal is also a valid Paragraph which is also a valid Section.
//       need to find a way to differentiate
//Decision can match input such as "RULE_L_ANGLE_BRACKET RULE_SIMPLE_WORD RULE_R_ANGLE_BRACKET" using multiple alternatives: 1, 2
//Decision can match input such as "RULE_SIMPLE_WORD" using multiple alternatives: 1, 2
//Decision can match input such as "RULE_STR" using multiple alternatives: 1, 2
//Decision can match input such as "RULE_NUM" using multiple alternatives: 1, 2
//Decision can match input such as "'!'..'~'" using multiple alternatives: 1, 2
//Decision can match input such as "RULE_L_ANGLE_BRACKET RULE_SIMPLE_WORD RULE_R_ANGLE_BRACKET" using multiple alternatives: 1, 2
//Decision can match input such as "RULE_SIMPLE_WORD" using multiple alternatives: 1, 2
//Decision can match input such as "RULE_STR" using multiple alternatives: 1, 2
//Decision can match input such as "RULE_NUM" using multiple alternatives: 1, 2
//Decision can match input such as "'!'..'~'" using multiple alternatives: 1, 2

// Text Structure
////

WordsModel:
	sections+=Section*
;

// TODO: Section should have subtype NamedSection
Section: Paragraph;

Paragraph: {Paragraph}
	text=Text
;

// We must anchor to a starting position, so text is separated into first/rest... elements
Text:
	first=StartTextLiteral
	rest+=Literal*
;

// Word Literals
////

Literal: StyledText 
	| {Literal} Word
	| {Literal} PUNCTUATION 
;

StartTextLiteral: StyledText
	| {StartTextLiteral} Word
	| {StartTextLiteral} PUNCTUATION
;

StyledText: SymbolicWord
	| {StyledText} Number 
	| {StyledText} String 
;

// TODO: provide additional symbolic keyword matching options
SymbolicWord: 
	L_ANGLE_BRACKET
	value=Word
	R_ANGLE_BRACKET
;

Word: SIMPLE_WORD;

Number: NUM;

// TODO: should provide access to string contents and surrounding quote type
String: STR;


// Common Terminals
////

terminal fragment SIMPLE_WORD_FRAGMENT: ALPHA_NUM (ALPHA_NUM | '-' | '_')*;
terminal fragment ALPHA_NUM: (LETTER | DIGIT);
terminal fragment LETTER: ('a'..'z'|'A'..'Z');
terminal fragment DIGIT: ('0'..'9');
terminal fragment NEW_LINE: ('\r'? '\n');
terminal fragment SPACE: (' ' | '\t');

terminal NUM returns ecore::EDouble:
	'-'? (DIGIT)+ ('.' (DIGIT)+)?;
	
terminal STR returns ecore::EString:
		'"' ( '\\' . | !('\\'|'"') )* '"' |
		"'" ( '\\' . | !('\\'|"'") )* "'"
;

terminal SIMPLE_WORD: SIMPLE_WORD_FRAGMENT;

PUNCTUATION:  '!'
    | '-'
    | '--'
    | '$'
    | '%'
    | '&'
    | '\''
    | '('
    | ')'
    | '+'
    | ','
    | '.'
    | '/'
    | '\\'
    | '='
    | '?'
    | '['
    | ']'
    | '^'
    | '{'
    | '}'
    | '~'
    | '...'
 ;
 
terminal L_ANGLE_BRACKET: '<';
terminal R_ANGLE_BRACKET: '>';

terminal NL: NEW_LINE+ SPACE*;
terminal WS: SPACE+;
