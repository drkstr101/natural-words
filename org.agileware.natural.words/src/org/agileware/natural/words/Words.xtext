/**
 * Note on Comments
 * ----------------
 * The comments shown above each element are always updated first,
 * and represent the true spec as it's intended. Any mismatch between 
 * the code and these comments is a bug in the code, and not of the 
 * spec. This does not imply however that the spec correctly matches the 
 * true intention, which is a bug in the spec and not the code.
 * 
 */
grammar org.agileware.natural.words.Words hidden(WS)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate words "http://www.agileware.org/natural/words/Words"


// Structural Elements
////

/**
 * Contains a single Document which may possibly be null when no readable content can be parsed
 */
WordsModel:
	document=Document?
;

/**
 * Contains Section+
 */
Document:
	sections+=Section+
;

/**
 *  A block of semantic text content, such as a Paragraph, Table*, or NamedSection*, etc.
 */
Section: Paragraph;

/**
 * Contains a single StartLiteral, a single EndLiteral, and a single TextLiteral
 */
Paragraph: {Paragraph}
	start=StartLiteral
	rest=TextLiteral
	end=EndLiteral
;

/**
 * Any valid terminal that specifies the start of a paragraph
 */
StartLiteral: {StartLiteral}
	SIMPLE_WORD
;

/**
 * Any valid terminal that specifies the end of a paragraph
 */
EndLiteral: {EndLiteral}
	NL
;

/**
 * TextLiteral is any valid block of semantic text that may is
 * contained between a StartLiteral and an EndLiteral. Each TextLiteral
 * will have an EString value containing the true string value without
 * semantic terminals or additional whitespace
 */
TextLiteral: Text;

/**
 * Contains a single TextValue as an EString
 */
Text: {Text}
	value=TextValue
;

/**
 * generic type of EString representing the true semantic 
 * value of a block of text content 
 */
TextValue: EmptyTextValue
	| WordGroupTextValue
;

/**
 * Contains 0 or more WS chars
 * @returns an empty string
 */
EmptyTextValue returns ecore::EString:
	WS*
;

/**
 * Multi-line group of word literals
 * @returns A string without any whitespace at the start or end of the string
 */
WordGroupTextValue returns ecore::EString:
	((SIMPLE_WORD) (SIMPLE_WORD)* NL)+
;

// Word Literals
////

// Literal is any valid Word, Punctuation, or WordGroup*
//Literal: StyledText 
//	| {Literal} Word
//	| {Literal} PUNCTUATION 
//;

// StartTextLiteral denotes the starting Literal of a Paragraph
//StartTextLiteral: StyledText
//	| {StartTextLiteral} Word
//	| {StartTextLiteral} PUNCTUATION
//;

// StyledText is a Word or WordGroup accompanied by surrounding 
// Punctuation to make it a single semantic element
//StyledText: SymbolicWord
//	| {StyledText} Number 
//	| {StyledText} String 
//;

// SymbolicWord is StyledText with a single Word literal 
// that has semantic meaning in the Paragraph
// TODO: provide additional symbolic keyword matching options
//SymbolicWord: 
//	L_ANGLE_BRACKET
//	value=Word
//	R_ANGLE_BRACKET
//;

// Word is a single ALPHA_NUM fragment followed by 0 or more ALPHA_NUM fragments
//Word: SIMPLE_WORD;

// WordGroup consists of one or more SIMPLE_WORD fragments
//WordGroup: SIMPLE_WORD SIMPLE_WORD*;

// Number is any valid NUM text
//Number: NUM;

// String is any valid STR text, with a containing WordGroup* and surrounding QUOTE* elements
// TODO: should provide access to string contents and surrounding quote type
//String: STR;


// Common Terminals
////

terminal fragment SIMPLE_WORD_FRAGMENT: ALPHA_NUM (ALPHA_NUM | '-' | '_')*;
terminal fragment ALPHA_NUM: (LETTER | DIGIT);
terminal fragment LETTER: ('a'..'z'|'A'..'Z');
terminal fragment DIGIT: ('0'..'9');
terminal fragment NEW_LINE: ('\r'? '\n');
terminal fragment SPACE: (' ' | '\t');

//terminal NUM returns ecore::EDouble:
//	'-'? (DIGIT)+ ('.' (DIGIT)+)?
//;
	
//terminal STR returns ecore::EString:
//		'"' ( '\\' . | !('\\'|'"') )* '"' |
//		"'" ( '\\' . | !('\\'|"'") )* "'"
//;

//terminal LOT:
//	(
//		(SIMPLE_WORD)
//		(SIMPLE_WORD)* 
//		NL
//	)+
//;

terminal SIMPLE_WORD: SIMPLE_WORD_FRAGMENT;

//QUOTATION: QUOTE
//	| SINGLE_QUOTE
//	| BACKTICK
//;

//PUNCTUATION:  AT
//	  | HASH
//    | QUOTATION
//	  | '!'
//    | '-'
//    | '--'
//    | '$'
//    | '%'
//    | '&'
//    | '('
//    | ')'
//    | '+'
//    | ','
//    | '.'
//    | '/'
//    | '\\'
//    | '='
//    | '?'
//    | '['
//    | ']'
//    | '^'
//    | '{'
//    | '}'
//    | '~'
//    | '...'
//    | ANY
//;

//terminal AT: '@';
//terminal STAR: '*';
//terminal QUOTE: '"';
//terminal SINGLE_QUOTE: '\'';
//terminal BACKTICK: '`';
//terminal L_ANGLE_BRACKET: '<';
//terminal R_ANGLE_BRACKET: '>';
//terminal HASH: '#';

terminal NL: NEW_LINE+ SPACE*;
terminal WS: SPACE+;

terminal ANY: .;
