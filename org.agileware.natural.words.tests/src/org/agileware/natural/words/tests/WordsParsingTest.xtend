/*
 * generated by Xtext 2.21.0
 */
package org.agileware.natural.words.tests

import com.google.inject.Inject
import org.agileware.natural.words.tracer.WordsTracer
import org.agileware.natural.words.words.WordsModel
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.hamcrest.CoreMatchers.*
import static org.hamcrest.MatcherAssert.*

@ExtendWith(InjectionExtension)
@InjectWith(WordsInjectorProvider)
class WordsParsingTest {

	@Inject
	ParseHelper<WordsModel> parseHelper

	@Test
	def void singleLineParagraph() {
		val model = parseHelper.parse('''
			The quick brown fox
			
		''')

		assertThat(model.eResource.errors, equalTo(#[]))
		
		val doc = model.document
		assertThat(doc, notNullValue())
		assertThat(doc.sections.size(), equalTo(1))
	}

	@Test
	def void multiLineParagraph() {
		val model = parseHelper.parse('''
			The quick brown fox
			Jumps over the lazy moon
			
		''')

		assertThat(model.eResource.errors, equalTo(#[]))
		
		val doc = model.document
		assertThat(doc, notNullValue())
		assertThat(doc.sections.size(), equalTo(1))
	}

	@Test
	def void multipleParagraphs() {
		val model = parseHelper.parse('''
			The quick brown fox
			Jumps over the lazy moon
			
			But only on days that end in Y
		''')

		assertThat(model.eResource.errors, equalTo(#[]))
		
		val doc = model.document
		assertThat(doc, notNullValue())
		
		// TODO: Test failure!
		assertThat(doc.sections.size(), equalTo(2))
	}
}
